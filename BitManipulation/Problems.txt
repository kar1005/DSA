-->Swapping Two numbers using bit manipulation:
class Solution{
	public void swap(int x,int y){
		x = x ^ y;
		y = x ^ y;
		x = x ^ y; 
	}
}
-Step1: x = xor of x and y
-Step2: y = xor of x(x xor y) and y (results x)
-Step3: x = xor of x(x xor y) and y(now contains value of x) (results y)


-->Check if ith bit is set or not(can be done using both left and right shift):
class Solution{
	public boolean check(int n,int i){
		if((n>>i)==1)
			return true;
		else
			return false;
	}
}


-->Setting the ith bit to 1:
class Solution{
	public int setBit(int n,int i){
		return n|(1<<i);
	}
}


-->Toggle the ith bit:(xor operation)
class Solution{
	public int toggleBit(int n,int i){
		return n^(1<<i);
	}
}

-->Clearing the rightmost bit in the number:
class Solution{
	public int resetBit(int n,int i){
		return n&(n-1);
	}
}
example: Todo:-40(101000)-->100000
	39: 100111
	101000 & 100111 = 100000


-->Setting the rightmost bit:i | (i + 1)

-->Count the number of set bits:
class Solution {
    public int countSetBits(int n) {
        int count = 0;
		while(n!=0){
			n & (n-1);
			count++;
		}
		return count;
    }
}

-->Find the element that appears once while others thrice:
i> BitManipulation Approach 
video:https://www.youtube.com/watch?v=5Bb2nqA40JY&list=PLgUwDviBIf0rnqh8QsJaHyIX7KUiaPUv7&index=6
class Solution {
    public int findNumber(int[] arr) {
        int ans = 0;
		int n = arr.length;
		for(int index = 0;index<32;i++){
			int cnt = 0;
			for(int i=0;i<n;i++){
				if(arr[i]&(1<<index)>0)
					cnt++;
			}
			if(cnt%3==1){
				ans = ans | (1<<index);
			}
		}
		return ans;
    }
}

2> Sorting Approach
class Solution {
    public int findNumber(int[] arr) {
        Arrays.sort(arr);
		for(int i=1;i<n;i+=3){
			if(!(arr[i-1]==arr[i])&& (arr[i]==arr[i+1]))
				return arr[i-1];
		}
		return arr[arr.length-1];//Edge case where if the single element is the last one.
    }
}

3> Buckets Approach
class Solution {
    public int findNumber(int[] arr) {
        int ones = 0, twos = 0;
		for(int i=0;i<arr.length;i++){
			ones = (ones ^ arr[i]) & ~twos;
			twos = (twos ^ arr[i]) & ~ones;
		}
		return ones;
    }
}

->Finding the single element in the array while others twice:
//video:https://www.youtube.com/watch?v=UA5JnV1J2sI&list=PLgUwDviBIf0rnqh8QsJaHyIX7KUiaPUv7&index=7
Steps:
1>Find the 1st Position where both the numbers differ in bits
2>Form 2 buckets and classify the elements on the basis of that bit position difference
3>This will lead the numbers that appear only once in the array be seperated into buckets

//Time Complexity: O(2n)

class Solution {
    public int[] findNumber(int[] arr) {
        long xor = 0; //keeping it long as the element can be 2^-31 small so to store it we need long
		for(int i=0;i<arr.length;i++){
			xor ^= arr[i];
		}
		int num = (xor & (xor-1)) ^ xor;
		int zero = 0;
		itn one = 0;
		for(int i=0;i<n;i++){
			if( (arr[i]&num) >0)
				one ^= arr[i];
			else	
				zero ^= arr[i];
		}
		return new int[]{zero,one};
    }
}

->Finding xor of 1 to n
Looping from 1 to n is not optimal Solution
video:https://www.youtube.com/watch?v=WqGb7159h7Q&list=PLgUwDviBIf0rnqh8QsJaHyIX7KUiaPUv7&index=8
Pattern:
n%4=1-->xor is 1
n%4=2-->xor is n+1
n%4=3-->xor is 0
n%4=0-->xor is n

class Solution {
    public int findNumber(int n) {
       if(n%4==0)
	   	return n;
		else if(n%4==1)
			return 1;
		else if(n%4==2)
			return n+1;
		else	
			return 0;
    }
}

-->Finding Xor from any L to R
Approach:
l=4,r=7
(1^2^3) ^ (1^2^3^4^5^6^7)

class Solution {
    public int findNumber(int n) {
       if(n%4==0)
	   	return n;
		else if(n%4==1)
			return 1;
		else if(n%4==2)
			return n+1;
		else	
			return 0;
    }
	public int fromLToR(int l ,int r){
		int xor = findNumber(r);
		xor ^= findNumber(l-1);
		return xor;
	}
}

-->Power:
function(int x, int n){
	int m = n;
	n = Math.abs(n);
	double ans = 1;
	while(n>0){
		if(n%2==1)
			ans *= x;
		ans += x*x;
		n /=2;
	}
	if(m<0)
		return 1.0 / ans;
	return ans;
}